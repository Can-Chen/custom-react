(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

  const FunctionComponent = 0;
  const HostRoot = 3;
  const HostComponent = 5;
  const HostText = 6;

  const NoFlags = 0b0000001;
  const Placement = 0b0000010;
  const Update = 0b0000100;
  const ChildDeletion = 0b0001000;
  const MutationMask = Placement | Update | ChildDeletion;

  class FiberNode {
      type;
      tag;
      pendingProps;
      key;
      stateNode;
      ref;
      return;
      sibling;
      child;
      index;
      memoizedProps;
      memoizedState;
      alternate;
      flags;
      subtreeFlags;
      updateQueue;
      constructor(tag, pendingProps, key) {
          // 实例
          this.tag = tag;
          this.key = key;
          // HostCompoent <div> div DOM
          this.stateNode = null;
          // FunctionComponent () => {}
          this.type = null;
          // 构成树状结构
          this.return = null;
          this.sibling = null;
          this.child = null;
          this.index = 0;
          this.ref = null;
          // 作为工作单元
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.memoizedState = null;
          this.updateQueue = null;
          this.alternate = null;
          // 副作用
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
      }
  }
  class FiberRootNode {
      container;
      current;
      finishedWork;
      constructor(container, hostRootFiber) {
          this.container = container;
          this.current = hostRootFiber;
          hostRootFiber.stateNode = this;
          this.finishedWork = null;
      }
  }
  const createWorkInProgress = (current, pendingProps) => {
      let wip = current.alternate;
      if (wip === null) {
          wip = new FiberNode(current.tag, pendingProps, current.key);
          wip.stateNode = current.stateNode;
          wip.alternate = current;
          current.alternate = wip;
      }
      else {
          wip.pendingProps = pendingProps;
          wip.flags = NoFlags;
      }
      wip.type = current.type;
      wip.updateQueue = current.updateQueue;
      wip.child = current.child;
      wip.memoizedProps = current.memoizedProps;
      wip.memoizedState = current.memoizedState;
      return wip;
  };
  function createFiberFromElement(element) {
      const { type, key, props } = element;
      let fiberTag = FunctionComponent;
      if (typeof type === "string") {
          // <div /> div
          fiberTag = HostComponent;
          // @ts-ignore
      }
      else if (typeof type !== "function" && __Dev__) {
          console.warn("未定义type类型", type);
      }
      const fiber = new FiberNode(fiberTag, props, key);
      fiber.type = type;
      return fiber;
  }

  // setState支持传数据或函数
  const createUpdate = (action) => {
      return {
          action,
      };
  };
  const createUpdateQueue = () => {
      return {
          shared: {
              pending: null,
          },
      };
  };
  const enqueueUpdate = (updateQueue, update) => {
      updateQueue.shared.pending = update;
  };
  const processUpdateQueue = (baseState, pendingUpdate) => {
      const result = {
          memoizedState: baseState,
      };
      if (pendingUpdate !== null) {
          const action = pendingUpdate.action;
          if (action instanceof Function) {
              // baseState 1 update (x) => 4x -> memoizedState 4
              result.memoizedState = action(baseState);
          }
          else {
              // baseState 1 update 2 -> memoizedState 2
              result.memoizedState = action;
          }
      }
      return result;
  };

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xeac7;

  function ChildReconciler(shouldTrackEffects) {
      function recorncileSingleElement(returnFiber, currentFiber, element) {
          const fiber = createFiberFromElement(element);
          fiber.return = returnFiber;
          return fiber;
      }
      function reconcileSingleTextNode(returnFiber, currentFiber, content) {
          const fiber = new FiberNode(HostText, { content }, null);
          fiber.return = returnFiber;
          return fiber;
      }
      function placeSingleChild(fiber) {
          if (shouldTrackEffects && fiber.alternate === null) {
              fiber.flags |= Placement;
          }
          return fiber;
      }
      return function reconcilerChildFibers(returnFiber, currentFiber, newChild) {
          if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                      return placeSingleChild(recorncileSingleElement(returnFiber, currentFiber, newChild));
                  default:
                      // @ts-ignore
                      {
                          console.warn("未实现reconile类型", newChild);
                      }
                      break;
              }
          }
          if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
          }
          // @ts-ignore
          {
              console.warn("未实现reconile类型", newChild);
          }
          return null;
      };
  }
  const reconcilerChildFibers = ChildReconciler(true);
  const mountChildFibers = ChildReconciler(false);

  // 递阶段
  const beginWork = (wip) => {
      //比较 返回子fiberNode
      switch (wip.tag) {
          case HostRoot:
              return updateHostRoot(wip);
          case HostComponent:
              return updateHostcomponent(wip);
          case HostText:
              return null;
          default:
              // @ts-ignore
              {
                  console.warn("begin未实现的类型");
              }
              break;
      }
      return null;
  };
  function updateHostRoot(wip) {
      const baseState = wip.memoizedState;
      const updateQueue = wip.updateQueue;
      const pending = updateQueue.shared.pending;
      updateQueue.shared.pending = null;
      const { memoizedState } = processUpdateQueue(baseState, pending);
      wip.memoizedState = memoizedState;
      const nextChildren = wip.pendingProps.children;
      reconcilerChildren(wip, nextChildren);
      return wip.child;
  }
  function updateHostcomponent(wip) {
      const nextProps = wip.pendingProps;
      const nextChildren = nextProps.children;
      reconcilerChildren(wip, nextChildren);
      return wip.child;
  }
  function reconcilerChildren(wip, children) {
      const current = wip.alternate;
      if (current !== null) {
          // update
          wip.child = reconcilerChildFibers(wip, current?.child, children);
      }
      else {
          // mount
          wip.child = mountChildFibers(wip, null, children);
      }
  }

  const createInstance = (type) => {
      // TODO 处理props
      const element = document.createElement(type);
      return element;
  };
  const appendInitialChild = (parent, child) => {
      parent.appendChild(child);
  };
  const createTextInstance = (content) => {
      return document.createTextNode(content);
  };
  const appendChildToContainer = appendInitialChild;

  let nextEffect = null;
  const commitMutationEffects = (finishedWork) => {
      nextEffect = finishedWork;
      while (nextEffect !== null) {
          // 向下遍历
          const child = nextEffect.child;
          if ((nextEffect.subtreeFlags && MutationMask) !== NoFlags &&
              child !== null) {
              nextEffect = child;
          }
          else {
              // 向上遍历
              up: while (nextEffect !== null) {
                  commitMutationEffectsOnFiber(nextEffect);
                  const sibling = nextEffect.sibling;
                  if (sibling !== null) {
                      nextEffect = sibling;
                      break up;
                  }
                  nextEffect = nextEffect.return;
              }
          }
      }
  };
  const commitMutationEffectsOnFiber = (finishedWork) => {
      const flags = finishedWork.flags;
      if ((flags & Placement) !== Placement) {
          commitPlacement(finishedWork);
          finishedWork.flags &= ~Placement;
      }
      // flag update
      // flag delete
  };
  const commitPlacement = (finishedWork) => {
      // @ts-ignore
      {
          console.warn("执行placement操作", finishedWork);
      }
      // parent Dom
      const hostParent = getHostParent(finishedWork);
      if (hostParent !== null) {
          appendPlacementNodeIntoContainer(finishedWork, hostParent);
      }
  };
  const getHostParent = (fiber) => {
      let parent = fiber.return;
      while (parent) {
          const parentTag = parent.tag;
          if (parentTag === HostComponent) {
              return parent.stateNode;
          }
          if (parentTag === HostRoot) {
              return parent.stateNode.container;
          }
          parent = parent.return;
      }
      // @ts-ignore
      {
          console.warn("未找到 host parent");
      }
      return null;
  };
  const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
      if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
          appendChildToContainer(hostParent, finishedWork.stateNode);
          return;
      }
      const child = finishedWork.child;
      if (child !== null) {
          appendPlacementNodeIntoContainer(child, hostParent);
          let sibling = child.sibling;
          while (sibling !== null) {
              appendPlacementNodeIntoContainer(sibling, hostParent);
              sibling = sibling.sibling;
          }
      }
  };

  // 归阶段
  const completeWork = (wip) => {
      //比较 返回子fiberNode
      const newProps = wip.pendingProps;
      const current = wip.alternate;
      switch (wip.tag) {
          case HostComponent:
              if (current !== null && wip.stateNode) ;
              else {
                  // 1. 构建DOM
                  const instance = createInstance(wip.type);
                  // 2. 将DOM插入到DOM树中
                  appendAllChildren(instance, wip);
                  wip.stateNode = instance;
              }
              bubbleProperties(wip);
              return null;
          case HostText:
              if (current !== null && wip.stateNode) ;
              else {
                  // 1. 构建DOM
                  const instance = createTextInstance(newProps.content);
                  wip.stateNode = instance;
              }
              bubbleProperties(wip);
              return null;
          case HostRoot:
              bubbleProperties(wip);
              return null;
          default:
              // @ts-ignore
              {
                  console.warn("未处理的completeWork情况", wip);
              }
              break;
      }
  };
  // TODO-read
  function appendAllChildren(parent, wip) {
      let node = wip.child;
      while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node?.stateNode);
              // <App /> 组件节点
          }
          else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
          }
          if (node === wip) {
              return;
          }
          while (node.sibling === null) {
              if (node.return === null || node.return === wip) {
                  return;
              }
              node = node?.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
      }
  }
  // TODO-read
  function bubbleProperties(wip) {
      let subtreeFlags = NoFlags;
      let child = wip.child;
      while (child !== null) {
          subtreeFlags |= child.subtreeFlags;
          subtreeFlags |= child.flags;
          child.return = wip;
          child = child.sibling;
      }
      wip.subtreeFlags |= subtreeFlags;
  }

  let workInProgress = null;
  function prepareFreshStack(root) {
      workInProgress = createWorkInProgress(root.current, {});
  }
  function scheduleUpdateOnFiber(fiber) {
      // TODO 调度功能
      // fiberRootNode
      const root = markUpdateFromFiberToRoot(fiber);
      renderRoot(root);
  }
  function markUpdateFromFiberToRoot(fiber) {
      let node = fiber;
      let parent = node.return;
      while (parent !== null) {
          node = parent;
          parent = node.return;
      }
      if (node.tag === HostRoot) {
          return node.stateNode;
      }
      return null;
  }
  function renderRoot(root) {
      // 初始化
      prepareFreshStack(root);
      do {
          try {
              workLoop();
              break;
          }
          catch (e) {
              // @ts-ignore
              {
                  console.warn("workLoop发生错误", e);
              }
              workInProgress = null;
          }
      } while (true);
      const finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      // wip fiberNode树 树中的flags
      commitRoot(root);
  }
  function commitRoot(root) {
      const finishedWork = root.finishedWork;
      if (finishedWork === null) {
          return;
      }
      // @ts-ignore
      {
          console.warn("commit阶段开始", finishedWork);
      }
      // 重置
      root.finishedWork = null;
      // 判断是否存在3个子阶段需要执行的操作
      // root flags root subtreeFlags
      const subtreeHasEffect = (finishedWork.subtreeFlags && MutationMask) !== NoFlags;
      const rootHasEffect = (finishedWork.flags && MutationMask) !== NoFlags;
      if (subtreeHasEffect || rootHasEffect) {
          // before mutation
          // mutation placement
          commitMutationEffects(finishedWork);
          root.current = finishedWork;
      }
      else {
          root.current = finishedWork;
      }
  }
  function workLoop() {
      while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
      }
  }
  function performUnitOfWork(fiber) {
      const next = beginWork(fiber);
      fiber.memoizedProps = fiber.pendingProps;
      if (next === null) {
          completeUnitOfWork(fiber);
      }
      else {
          workInProgress = next;
      }
  }
  function completeUnitOfWork(fiber) {
      let node = fiber;
      do {
          completeWork(node);
          const sibling = node.sibling;
          if (sibling !== null) {
              workInProgress = sibling;
              return;
          }
          node = node.return;
          workInProgress = node;
      } while (node !== null);
  }

  function createContainer(container) {
      const hostRootFiber = new FiberNode(HostRoot, {}, null);
      const root = new FiberRootNode(container, hostRootFiber);
      hostRootFiber.updateQueue = createUpdateQueue();
      return root;
  }
  function updateContainer(element, root) {
      const hostRootFiber = root.current;
      const update = createUpdate(element);
      enqueueUpdate(hostRootFiber.updateQueue, update);
      scheduleUpdateOnFiber(hostRootFiber);
      return element;
  }

  function createRoot(container) {
      const root = createContainer(container);
      return {
          render(element) {
              updateContainer(element, root);
          },
      };
  }

  var ReactDOM = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createRoot: createRoot
  });

  return ReactDOM;

}));
