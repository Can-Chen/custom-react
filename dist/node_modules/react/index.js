(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

  const currentDispatcher = {
      current: null,
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher === null) {
          throw new Error("hook在能在函数组件中执行");
      }
      return dispatcher;
  };

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: "cc",
      };
      return element;
  };
  function isValidElement$1(object) {
      return (typeof object === "object" &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }
  const jsx = (type, config, maybeKey) => {
      let key = null;
      const props = {};
      let ref = null;
      if (maybeKey !== undefined) {
          key = "" + maybeKey;
      }
      for (const prop in config) {
          const val = config[prop];
          if (prop === "key") {
              if (val !== undefined) {
                  key = "" + val; // react中的key是字符串？？？
              }
              continue;
          }
          if (prop === "ref") {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // 判断prop确实是config的自有属性
          // 排除原型上的属性
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  const version = "0.0.0";
  // TODO 根据环境区分使用jsx/jsxDEV
  const createElement = jsx;
  const isValidElement = isValidElement$1;

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.useState = useState;
  exports.version = version;

}));
