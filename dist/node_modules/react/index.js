(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.React = factory());
})(this, (function () { 'use strict';

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: "cc",
      };
      return element;
  };
  const jsx = (type, config, maybeKey) => {
      let key = null;
      const props = {};
      let ref = null;
      if (maybeKey !== undefined) {
          key = "" + maybeKey;
      }
      for (const prop in config) {
          const val = config[prop];
          if (prop === "key") {
              if (val !== undefined) {
                  key = "" + val; // react中的key是字符串？？？
              }
              continue;
          }
          if (prop === "ref") {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // 判断prop确实是config的自有属性
          // 排除原型上的属性
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  // react源码中有不一样的处理 dev有一些额外的检查和warning打印
  const jsxDEV = jsx;

  var index = {
      createElement: jsxDEV,
      version: "0.0.0",
  };

  return index;

}));
